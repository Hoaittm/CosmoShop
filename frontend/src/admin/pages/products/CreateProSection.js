import React, { useEffect, useState } from 'react'
import { Link, useNavigate } from 'react-router-dom'
import { POST_ADD } from '../../../api/apiService';
import axios from 'axios';
import axiosInstance from '../../../api/axiosInstance';
import { toast } from 'react-toastify';

const CreateProSection = () => {
    const [file, setFile] = useState(null);


    const [value, setValue] = useState({
        productName: "",
        price: 0,
        priceSale:0,
        discription: "",
        category: "",
        availability: 0,
        // image: ""
    });

    const navigate = useNavigate();

    const handleFileChange = (event) => {
        const selectedFile = event.target.files[0];
        setFile(selectedFile);
    };

    // console.log("FIle: ", file)

    const handleInput = (e) => {
        setValue((prev) => ({ ...prev, [e.target.name]: e.target.value }))
    };

 const handleSubmit = async (e) => {
        e.preventDefault();

        // üåü KI·ªÇM TRA ƒêI·ªÄU KI·ªÜN ·∫¢NH ·ªû ƒê√ÇY
        if (!file) {
            toast.error('Vui l√≤ng ch·ªçn ·∫£nh cho s·∫£n ph·∫©m.');
            return; // D·ª´ng h√†m n·∫øu kh√¥ng c√≥ file
        }

        // Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc kh√°c n·∫øu c√≥
    
        
        console.log("Value submitted: ", value);
        const finalValue = { ...value};

        try {
            const response = await fetch('http://localhost:8900/api/catalog/admin/products', {
                method: "POST",
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(finalValue),
            });

            const result = await response.json();
            console.log("Product creation result:", result);

            if (response.ok && result.id) {
                toast.success("Th√™m s·∫£n ph·∫©m th√†nh c√¥ng");

                // ƒê·ª£i (await) h√†m handleUpload ho√†n t·∫•t
                const imageUrl = await handleUpload(result.id);

                if (imageUrl) {
                    // N·∫øu upload ·∫£nh th√†nh c√¥ng, c√≥ th·ªÉ c·∫≠p nh·∫≠t th√™m logic n·∫øu c·∫ßn
                } else {
                    toast.warn("·∫¢nh s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c t·∫£i l√™n th√†nh c√¥ng.");
                }

                // Chuy·ªÉn h∆∞·ªõng sau khi c·∫£ t·∫°o s·∫£n ph·∫©m v√† upload ·∫£nh ƒë·ªÅu ho√†n t·∫•t
                navigate("/admin/dashboard/all-product");
            } else {
                let errorMessage = "Th√™m s·∫£n ph·∫©m th·∫•t b·∫°i.";
                if (result && result.message) {
                    errorMessage += " " + result.message;
                }
                toast.error(errorMessage);
            }
        } catch (error) {
            console.log("Error in add products: ", error);
            toast.error("L·ªói m·∫°ng ho·∫∑c server kh√¥ng ph·∫£n h·ªìi.");
        }
    };

   

    const handleUpload = async (productId) => {
        if (!file) {
            // Kh√¥ng toast.warn ·ªü ƒë√¢y n·ªØa, v√¨ handleSubmit s·∫Ω x·ª≠ l√Ω tr∆∞·ªõc
            console.warn('Kh√¥ng c√≥ file ƒë·ªÉ upload.');
            return; // Tr·∫£ v·ªÅ null ho·∫∑c reject promise ƒë·ªÉ b√°o hi·ªáu kh√¥ng c√≥ file
        }

        const formData = new FormData();
        formData.append('image', file);
        console.log("Append formdata successful");

        try {
            const res = await axios.post(
                `http://localhost:8900/api/catalog/admin/products/${productId}/image`,
                formData,
                {
                    headers: {
                        'Content-Type': 'multipart/form-data' // N√™n t∆∞·ªùng minh
                    }
                }
            );
            console.log("Upload response:", res.data);
            if (res.data && res.data.imageUrl) {
                // toast.success('Upload ·∫£nh th√†nh c√¥ng!');
                return res.data.imageUrl; // Tr·∫£ v·ªÅ URL ·∫£nh ƒë·ªÉ c√≥ th·ªÉ d√πng n·∫øu c·∫ßn
            } else {
                // toast.error('Server kh√¥ng tr·∫£ v·ªÅ URL ·∫£nh sau khi upload.');
                return null;
            }
        } catch (error) {
            console.error('Error updating image:', error);
            toast.error('L·ªói khi upload ·∫£nh.');
            return null; // Tr·∫£ v·ªÅ null khi c√≥ l·ªói
        }
    };


    return (
        <div style={{ overflow: "auto", height: '800px' }}>
            <section className="content-header ">
                <div className="container">
                    <div className="flex">
                        <h1 className="text-xl font-semibold">Th√™m s·∫£n ph·∫©m</h1>
                    </div>
                </div>
                <section className="content">
                    <div className="card">
                        <form encType="multipart/form-data" onSubmit={handleSubmit}>
                            <div className="card-body p-4">
                                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                    <div className="col-span-2">
                                        <div className="mb-3">
                                            <label htmlFor="productName" className="block text-sm font-medium text-gray">T√™n s·∫£n ph·∫©m</label>
                                            <input
                                                type="text"
                                                name="productName"
                                                id="productName"
                                                className="form-control mt-1 p-2 w-full border border-gray rounded"
                                     
                                                onChange={handleInput}
                                            />
                                        </div>
                                        <div className="mb-3">
                                            <label htmlFor="discription" className="block text-sm font-medium text-gray">Chi ti·∫øt</label>
                                            <textarea
                                                name="discription"
                                                id="discription"
                                                rows={8}
                                                className="form-control mt-1 p-2 w-full border border-gray rounded"
                            
                                                onChange={handleInput}
                                            />
                                        </div>
                                    </div>

                                    <div>
                                        <div className="mb-3">
                                            <label htmlFor="category" className="block text-sm font-medium text-gray">Danh m·ª•c</label>
                                            <input
                                                type='text'
                                                name="category"
                                                id="category"
                                                className="form-control mt-1 p-2 w-full border border-gray rounded"
                            
                                                onChange={handleInput}
                                            />
                                        </div>
                                        <div className="mb-3">
                                            <label htmlFor="price" className="block text-sm font-medium text-gray">Gi√°</label>
                                            <input
                                                type="number"
                                                name="price"
                                                id="price"
                                                className="form-control mt-1 p-2 w-full border border-gray rounded"
                                        
                                                onChange={handleInput}
                                            />
                                        </div>
                                          <div className="mb-3">
                                            <label htmlFor="priceSale" className="block text-sm font-medium text-gray">Khuy·∫øn m√£i</label>
                                            <input
                                                type="number"
                                                name="priceSale"
                                                id="priceSale"
                                                className="form-control mt-1 p-2 w-full border border-gray rounded"
                                       
                                                onChange={handleInput}
                                            />
                                        </div>
                                        
                                        <div className="mb-3">
                                            <label htmlFor="availability" className="block text-sm font-medium text-gray">S·ªë l∆∞·ª£ng kho</label>
                                            <input
                                                type="number"
                                                name="availability"
                                                id="availability"
                                                className="form-control mt-1 p-2 w-full border border-gray-300 rounded"
                                           
                                                onChange={handleInput}
                                            />
                                        </div>
                                         <div className="form-group">
                                <label htmlFor="image">·∫¢nh s·∫£n ph·∫©m</label>
                                <input
                                    type="file"
                                    className="form-control-file"
                                    id="image"
                                    name="image"
                                    accept="image/*"
                                    onChange={handleFileChange}
                                    // Kh√¥ng ƒë·∫∑t required ·ªü ƒë√¢y, v√¨ ch√∫ng ta s·∫Ω ki·ªÉm tra th·ªß c√¥ng trong handleSubmit
                                />
                                {file && (
                                    <div className="mt-2">
                                        <img src={URL.createObjectURL(file)} alt="Preview" style={{ maxWidth: '200px', maxHeight: '200px' }} />
                                    </div>
                                )}
                            </div>
                                    </div>
                                </div>
                            </div>
                              <div className="card-header">
                {/* S·ª≠ d·ª•ng row v√† col c·ªßa Bootstrap ƒë·ªÉ s·∫Øp x·∫øp c√°c button */}
                <div className="row justify-content-start"> {/* justify-content-end ƒë·ªÉ ƒë∆∞a c√°c button v·ªÅ b√™n ph·∫£i */}
                    <div className="col-auto"> {/* col-auto s·∫Ω t·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh chi·ªÅu r·ªông theo n·ªôi dung */}
                        <button type="submit" name="create" className="btn btn-sm btn-success"> {/* D√πng btn-success c·ªßa Bootstrap/AdminLTE */}
                            <i className="fa fa-save" aria-hidden="true"></i> L∆∞u
                        </button>
                    </div>
                    <div className="col-auto ml-2"> {/* ml-2 ƒë·ªÉ t·∫°o kho·∫£ng c√°ch gi·ªØa c√°c button */}
                        <Link to="/admin/dashboard/all-product"> {/* D√πng "to" thay v√¨ "href" cho Link */}
                            <button
                                type="button"
                                className="btn btn-sm btn-info" // D√πng btn-info c·ªßa Bootstrap/AdminLTE (thay cho bg-blue)
                            >
                                <i className="fa fa-arrow-left" aria-hidden="true"></i> V·ªÅ danh s√°ch
                            </button>
                        </Link>
                    </div>
                </div>
            </div>
                        </form>
                    </div>
                </section>
            </section>
        </div>
    )
}

export default CreateProSection
